use zhoo_ast::ast::*;
use zhoo_ast::ptr::{fsp, Fsp};
use zhoo_span::span::{Span, Spanned};

use std::str::FromStr;

grammar;

pub Program: (Vec<Fsp<Stmt>>, Span) = {
  <lo:@L> <stmts:Stmt*> <hi:@R> => (stmts, Span::new(lo, hi)),
};

StmtBind: Fsp<Stmt> = {
  <stmt:Stmt> => stmt,
};

Stmt: Fsp<Stmt> = {
  StmtVal,
  StmtBlock,
  // StmtView,
};

StmtVal: Fsp<Stmt> = {
  <lo:@L> <val:StmtDecl> <hi:@R> => fsp(Stmt::new(StmtKind::Val(val), Span::new(lo, hi))),
};
StmtDecl: Fsp<Decl> = {
  <lo:@L> "val" <pattern:Pattern> ":" <ty:Ty> "=" <expr:Expr> ";" <hi:@R> => fsp(
    Decl::new(Mutability::No, DeclKind::Val, pattern, Some(ty), expr, Span::new(lo, hi))
  ),
};

StmtBlock: Fsp<Stmt> = {
  StmtFun,
  StmtUnit,
};

StmtFun: Fsp<Stmt> = {
  <lo:@L> <fun:Fun> <hi:@R> => fsp(Stmt::new(StmtKind::Fun(fun), Span::new(lo, hi))),
};
Fun: Fsp<Fun> = {
  <lo:@L> <public:public> <asyncness:asyncness> <unsafeness:unsafeness> <wasm:wasm> "fun" <prototype:Prototype> <block:BlockOrSemi> <hi:@R> => fsp(
    Fun::new(public, asyncness, unsafeness, wasm, prototype, block, Span::new(lo, hi))
  ),
};
Prototype: Prototype = {
  <lo:@L> <identifier:Identifier> "(" <args:Comma<Arg>> ")" <return_ty:ReturnTy> <hi:@R> => Prototype::new(identifier, args, return_ty, Span::new(lo, hi)),
};
Arg: Fsp<Arg> = {
  <lo:@L> <pattern:Pattern> ":" <ty:Ty> <hi:@R> => fsp(Arg::new(pattern, ty, Span::new(lo, hi))),
};
ReturnTy: ReturnTy = {
  ":" <ty:Ty> => ReturnTy::Ty(ty),
  <lo:@L> () <hi:@R> => ReturnTy::Default(Span::new(lo, hi)),
};
BlockOrSemi: Fsp<Block> = {
  Block,
  <lo:@L> ";" <hi:@R> => fsp(Block::new(vec![], Span::new(lo, hi))),
};

Block: Fsp<Block> = {
  <lo:@L> "{" <stmts:Exprs> "}" <hi:@R> => fsp(Block::new(stmts, Span::new(lo, hi))),
};

StmtUnit: Fsp<Stmt> = {
  <lo:@L> <unit:Unit> <hi:@R> => fsp(Stmt::new(StmtKind::Unit(unit), Span::new(lo, hi))),
};
Unit: Fsp<Unit> = {
  <lo:@L> "unit" "{" <binds:Comma<StmtBind>> <mocks:Mock*> <tests:Test*> "}" <hi:@R> => fsp(Unit::new(binds, mocks, tests, Span::new(lo, hi))),
};
Mock: Fsp<Fun> = {
  <lo:@L> "mock" <prototype:Prototype> <block:Block> <hi:@R> => fsp(Fun::new(Public::No, Async::No, Unsafe::No, Wasm::No, prototype, block, Span::new(lo, hi))),
};
Test: Fsp<Fun> = {
  <lo:@L> "test" <prototype:Prototype> <block:Block> <hi:@R> => fsp(Fun::new(Public::No, Async::No, Unsafe::No, Wasm::No, prototype, block, Span::new(lo, hi))),
};

StmtView: Fsp<Stmt> = {
  StmtTyAlias,
};

StmtTyAlias: Fsp<Stmt> = {
  <lo:@L> <ty_alias:TyAlias> <hi:@R> => fsp(Stmt::new(StmtKind::TyAlias(ty_alias), Span::new(lo, hi)))
};
TyAlias: Fsp<TyAlias> = {
  <lo:@L> <public:public> "type" <identifier:Identifier> "=" <kind:TyAliasKind> ";" <hi:@R> => fsp(TyAlias::new(public, identifier, kind, Span::new(lo, hi))),
};
TyAliasKind: TyAliasKind = {
  "=" <ty:Ty> => TyAliasKind::Single(ty),
  <ty:Ty> <tys:Sep<TyAliasField, "and">> => TyAliasKind::Group(tys),
};
TyAliasField: Fsp<TyAliasField> = {
  <lo:@L> <identifier:Identifier> "=" <ty:Ty> <hi:@R> => fsp(TyAliasField::new(identifier, ty, Span::new(lo, hi))),
};

Exprs: Vec<Fsp<Expr>> = {
  <mut v:ExprIntermediary*> <s:Expr?> => match s {
    None => v,
    Some(s) => {
      v.push(s);
      v
    }
  },
};
ExprIntermediary: Fsp<Expr> = {
  <expr:Expr> ";" => expr,
  <expr:ExprStmt> => expr,
  <lo:@L> <expr:ExprStmtNoSemi> <hi:@R> => expr,
};

ExprStmt: Fsp<Expr> = {
  ExprVal,
};

ExprStmtNoSemi: Fsp<Expr> = {
  ExprFun,
  ExprIf,
  ExprLoop,
  ExprWhile,
  ExprUntil,
};

Expr: Fsp<Expr> = {
  ExprDecl,
  ExprOr,
  ExprAssign,
  ExprWhen,
  ExprLambda,
};

ExprFun: Fsp<Expr> = {
  <lo:@L> <fun:StmtFun> <hi:@R> => fsp(Expr::new(ExprKind::Stmt(fun), Span::new(lo, hi))),
};

ExprVal: Fsp<Expr> = {
  <lo:@L> <stmt:StmtVal> <hi:@R> => fsp(Expr::new(ExprKind::Stmt(stmt), Span::new(lo, hi))),
};

ExprDecl: Fsp<Expr> = {
  <lo:@L> <decl:ExprImuOrMut> <hi:@R> => fsp(Expr::new(ExprKind::Decl(decl), Span::new(lo, hi))),
};
ExprImuOrMut: Fsp<Decl> = {
  <lo:@L> "imu" <pattern:Pattern> <ty_or_infer:ty_or_infer> <hi:@R> => fsp(
    Decl::new(Mutability::No, DeclKind::Imu, pattern, ty_or_infer.0, ty_or_infer.1, Span::new(lo, hi)),
  ),
  <lo:@L> "mut" <pattern:Pattern> <ty_or_infer:ty_or_infer> <hi:@R> => fsp(
    Decl::new(Mutability::Yes(Span::ZERO), DeclKind::Mut, pattern, ty_or_infer.0, ty_or_infer.1, Span::new(lo, hi)),
  ),
};
ty_or_infer: TyOrInfer = {
  ":" <ty:Ty> "=" <expr:Expr> => (Some(ty), expr),
  ":=" <expr:Expr> => (None, expr),
};

ExprLoop: Fsp<Expr> = {
  <lo:@L> "loop" <block:BlockOrExprArrow> <hi:@R> => fsp(Expr::new(ExprKind::Loop(block), Span::new(lo, hi))),
};
ExprWhile: Fsp<Expr> = {
  <lo:@L> "while" <condition:Expr> <block:BlockOrExprArrow> <hi:@R> => fsp(Expr::new(ExprKind::While(condition, block), Span::new(lo, hi))),
};
ExprUntil: Fsp<Expr> = {
  <lo:@L> "until" <condition:Expr> <block:BlockOrExprArrow> <hi:@R> => fsp(Expr::new(ExprKind::While(condition, block), Span::new(lo, hi))),
};
BlockOrExprArrow: Fsp<Block> = {
  <block:Block> => block,
  <lo:@L> "->" <expr:Expr>  ";" <hi:@R> => fsp(
    Block::new(
      vec![expr],
      Span::new(lo, hi),
    )
  ),
};

ExprControl: Fsp<Expr> = {
  <lo:@L> "return" <expr:Expr?> <hi:@R> => fsp(Expr::new(ExprKind::Return(expr), Span::new(lo, hi))),
  <lo:@L> "break" <expr:Expr?> <hi:@R> => fsp(Expr::new(ExprKind::Break(expr), Span::new(lo, hi))),
  <lo:@L> "continue" <hi:@R> => fsp(Expr::new(ExprKind::Continue, Span::new(lo, hi))),
};

ExprLambda: Fsp<Expr> = {
  <lo:@L> "fn" "(" <inputs:Comma<Identifier>> ")" <expr:BlockExprOrExprArrow> <hi:@R> => fsp(Expr::new(ExprKind::Lambda(inputs, expr), Span::new(lo, hi))),
};
BlockExprOrExprArrow: Fsp<Expr> = {
  <lo:@L> <block:Block> <hi:@R> => fsp(Expr::new(ExprKind::Block(block), Span::new(lo, hi))),
  "->" <expr:Expr> <hi:@R> => expr,
};

ExprIf: Fsp<Expr> = {
  <lo:@L> "if" <condition:Expr> <consequence:ExprBlock> <hi:@R> => fsp(Expr::new(ExprKind::IfElse(condition, consequence, None), Span::new(lo, hi))),
  <lo:@L> "if" <condition:Expr> <consequence:ExprBlock> "else" <alternative:BlockOrIf> <hi:@R> => fsp(Expr::new(ExprKind::IfElse(condition, consequence, Some(alternative)), Span::new(lo, hi))),
};
BlockOrIf: Fsp<Expr> = {
  ExprBlock,
  ExprIf,
};
ExprBlock: Fsp<Expr> = {
  <lo:@L> <block:Block> <hi:@R> => fsp(Expr::new(ExprKind::Block(block), Span::new(lo, hi))),
};

ExprWhen: Fsp<Expr> = {
  <lo:@L>
    "when" <condition:Expr>
    "?" <consequence:Expr>
    ":" <alternative:Expr>
  <hi:@R>
  => fsp(Expr::new(ExprKind::When(condition, consequence, alternative), Span::new(lo, hi))),
};

ExprAssign: Fsp<Expr> = {
  ExprAssignBinOp,
  <lo:@L> <lhs:Identifier> <op:AssignOp> <rhs:Expr> <hi:@R> => fsp(Expr::new(ExprKind::Assign(lhs, op, rhs), Span::new(lo, hi))),
};
AssignOp: BinOp = {
  <lo:@L> "=" <hi:@R> => Spanned::new(BinOpKind::Eq, Span::new(lo, hi)),
};

ExprAssignBinOp: Fsp<Expr> = {
  <lo:@L> <lhs:Identifier> <op:AssignBinOp> <rhs:Expr> <hi:@R> => fsp(Expr::new(ExprKind::AssignOp(lhs, op, rhs), Span::new(lo, hi))),
};
AssignBinOp: BinOp = {
  <lo:@L> "<<=" <hi:@R> => Spanned::new(BinOpKind::Shl, Span::new(lo, hi)),
  <lo:@L> "=>>" <hi:@R> => Spanned::new(BinOpKind::Shr, Span::new(lo, hi)),
  <lo:@L> "-=" <hi:@R> => Spanned::new(BinOpKind::Sub, Span::new(lo, hi)),
  <lo:@L> "&=" <hi:@R> => Spanned::new(BinOpKind::And, Span::new(lo, hi)),
  <lo:@L> "|=" <hi:@R> => Spanned::new(BinOpKind::BitAnd, Span::new(lo, hi)),
  <lo:@L> "+=" <hi:@R> => Spanned::new(BinOpKind::Add, Span::new(lo, hi)),
  <lo:@L> "*=" <hi:@R> => Spanned::new(BinOpKind::Mul, Span::new(lo, hi)),
  <lo:@L> "/=" <hi:@R> => Spanned::new(BinOpKind::Div, Span::new(lo, hi)),
  <lo:@L> "^=" <hi:@R> => Spanned::new(BinOpKind::BitXor, Span::new(lo, hi)),
  <lo:@L> "%=" <hi:@R> => Spanned::new(BinOpKind::Rem, Span::new(lo, hi)),
};

ExprOr: Fsp<Expr> = {
  ExprAnd,
  <lo:@L> <lhs:ExprOr> <op:OrOp> <rhs:ExprAnd> <hi:@R> => fsp(Expr::new(ExprKind::BinOp(lhs, op, rhs), Span::new(lo, hi))),
};
OrOp: BinOp = {
  <lo:@L> "||" <hi:@R> => Spanned::new(BinOpKind::Or, Span::new(lo, hi)),
};

ExprAnd: Fsp<Expr> = {
  ExprComp,
  <lo:@L> <lhs:ExprAnd> <op:AndOp> <rhs:ExprComp> <hi:@R> => fsp(Expr::new(ExprKind::BinOp(lhs, op, rhs), Span::new(lo, hi))),
};
AndOp: BinOp = {
  <lo:@L> "&&" <hi:@R> => Spanned::new(BinOpKind::And, Span::new(lo, hi)),
};

ExprComp: Fsp<Expr> = {
  ExprBitOr,
  <lo:@L> <lhs:ExprComp> <op:CompOp> <rhs:ExprBitOr> <hi:@R> => fsp(Expr::new(ExprKind::BinOp(lhs, op, rhs), Span::new(lo, hi))),
};
CompOp: BinOp = {
  <lo:@L> "==" <hi:@R> => Spanned::new(BinOpKind::Eq, Span::new(lo, hi)),
  <lo:@L> "!=" <hi:@R> => Spanned::new(BinOpKind::Ne, Span::new(lo, hi)),
  <lo:@L> "<" <hi:@R> => Spanned::new(BinOpKind::Lt, Span::new(lo, hi)),
  <lo:@L> ">" <hi:@R> => Spanned::new(BinOpKind::Gt, Span::new(lo, hi)),
  <lo:@L> "<=" <hi:@R> => Spanned::new(BinOpKind::Le, Span::new(lo, hi)),
  <lo:@L> ">=" <hi:@R> => Spanned::new(BinOpKind::Ge, Span::new(lo, hi)),
};

ExprBitOr: Fsp<Expr> = {
  ExprBitXor,
  <lo:@L> <lhs:ExprBitOr> <op:BitOrOp> <rhs:ExprBitXor> <hi:@R> => fsp(Expr::new(ExprKind::BinOp(lhs, op, rhs), Span::new(lo, hi))),
};
BitOrOp: BinOp = {
  <lo:@L> "|" <hi:@R> => Spanned::new(BinOpKind::BitOr, Span::new(lo, hi)),
};

ExprBitXor: Fsp<Expr> = {
  ExprBitAnd,
  <lo:@L> <lhs:ExprBitXor> <op:BitXorOp> <rhs:ExprBitAnd> <hi:@R> => fsp(Expr::new(ExprKind::BinOp(lhs, op, rhs), Span::new(lo, hi))),
};
BitXorOp: BinOp = {
  <lo:@L> "^" <hi:@R> => Spanned::new(BinOpKind::BitXor, Span::new(lo, hi)),
};

ExprBitAnd: Fsp<Expr> = {
  ExprShift,
  <lo:@L> <lhs:ExprBitAnd> <op:BitAndOp> <rhs:ExprShift> <hi:@R> => fsp(Expr::new(ExprKind::BinOp(lhs, op, rhs), Span::new(lo, hi))),
};
BitAndOp: BinOp = {
  <lo:@L> "&" <hi:@R> => Spanned::new(BinOpKind::BitAnd, Span::new(lo, hi)),
};

ExprShift: Fsp<Expr> = {
  ExprSum,
  <lo:@L> <lhs:ExprShift> <op:ShiftOp> <rhs:ExprSum> <hi:@R> => fsp(Expr::new(ExprKind::BinOp(lhs, op, rhs), Span::new(lo, hi))),
};
ShiftOp: BinOp = {
  <lo:@L> "<<" <hi:@R> => Spanned::new(BinOpKind::Shl, Span::new(lo, hi)),
  <lo:@L> ">>" <hi:@R> => Spanned::new(BinOpKind::Shr, Span::new(lo, hi)),
};

ExprSum: Fsp<Expr> = {
  ExprProd,
  <lo:@L> <lhs:ExprSum> <op:SumOp> <rhs:ExprProd> <hi:@R> => fsp(Expr::new(ExprKind::BinOp(lhs, op, rhs), Span::new(lo, hi))),
};
SumOp: BinOp = {
  <lo:@L> "+" <hi:@R> => Spanned::new(BinOpKind::Add, Span::new(lo, hi)),
  <lo:@L> "-" <hi:@R> => Spanned::new(BinOpKind::Sub, Span::new(lo, hi)),
};

ExprProd: Fsp<Expr> = {
  ExprRange,
  <lo:@L> <lhs:ExprProd> <op:ProdOp> <rhs:ExprRange> <hi:@R> => fsp(Expr::new(ExprKind::BinOp(lhs, op, rhs), Span::new(lo, hi))),
};
ProdOp: BinOp = {
  <lo:@L> "*" <hi:@R> => Spanned::new(BinOpKind::Mul, Span::new(lo, hi)),
  <lo:@L> "/" <hi:@R> => Spanned::new(BinOpKind::Div, Span::new(lo, hi)),
  <lo:@L> "%" <hi:@R> => Spanned::new(BinOpKind::Rem, Span::new(lo, hi)),
};

ExprRange: Fsp<Expr> = {
  ExprAs,
  <lo:@L> <lhs:ExprRange> <op:RangeOp> <rhs:ExprAs> <hi:@R> => fsp(Expr::new(ExprKind::BinOp(lhs, op, rhs), Span::new(lo, hi))),
};
RangeOp: BinOp = {
  <lo:@L> ".." <hi:@R> => Spanned::new(BinOpKind::Range, Span::new(lo, hi)),
};

ExprAs: Fsp<Expr> = {
  ExprUnOp,
  <lo:@L> <lhs:ExprAs> <op:AsOp> <rhs:ExprUnOp> <hi:@R> => fsp(Expr::new(ExprKind::BinOp(lhs, op, rhs), Span::new(lo, hi))),
};
AsOp: BinOp = {
  <lo:@L> "as" <hi:@R> => Spanned::new(BinOpKind::As, Span::new(lo, hi)),
};

ExprUnOp: Fsp<Expr> = {
  ExprSuffix,
  <lo:@L> <op:UnOp> <rhs:ExprSuffix> <hi:@R> => fsp(Expr::new(ExprKind::UnOp(op, rhs), Span::new(lo, hi))),
};
UnOp: UnOp = {
  <lo:@L> "-" <hi:@R> => Spanned::new(UnOpKind::Neg, Span::new(lo, hi)),
  <lo:@L> "!" <hi:@R> => Spanned::new(UnOpKind::Not, Span::new(lo, hi)),
};

ExprSuffix: Fsp<Expr> = {
  ExprAtom,
  <lo:@L> <callee:ExprSuffix> "(" <args:Comma<Expr>>")" <hi:@R> => fsp(Expr::new(ExprKind::Call(callee, args), Span::new(lo, hi))),
  <lo:@L> <identifier:ExprSuffix> "." <int:LiteralInteger> <hi:@R> => fsp(Expr::new(ExprKind::TupleAccess(identifier, int), Span::new(lo, hi))),
  <lo:@L> <indexed:ExprSuffix> "[" <index:Expr> "]" <hi:@R> => fsp(Expr::new(ExprKind::ArrayAccess(indexed, index), Span::new(lo, hi))),
};

ExprAtom: Fsp<Expr> = {
  Literal,
  ExprPath,
  ExprArray,
  ExprTuple,
};

ExprArray: Fsp<Expr> = {
  <lo:@L> "[" <xs:Comma<Expr>> "]" <hi:@R> => fsp(Expr::new(ExprKind::Array(xs), Span::new(lo, hi))),
};

ExprTuple: Fsp<Expr> = {
  <lo:@L> "(" <xs:Comma<Expr>> ")" <hi:@R> => fsp(Expr::new(ExprKind::Tuple(xs), Span::new(lo, hi))),
};

ExprPath: Fsp<Expr> = {
  Path<"::">,
};
Path<Sep>: Fsp<Expr> = {
  Identifier,
};

Ty: Fsp<Ty> = {
  TyPrim,
  TyFun,
  TyArray,
  TyTuple,
};
TyPrim: Fsp<Ty> = {
  <lo:@L> "void" <hi:@R> => fsp(Ty::new(TyKind::Void, Span::new(lo, hi))),
  <lo:@L> "int" <hi:@R> => fsp(Ty::new(TyKind::Int, Span::new(lo, hi))),
  <lo:@L> "real" <hi:@R> => fsp(Ty::new(TyKind::Real, Span::new(lo, hi))),
  <lo:@L> "bool" <hi:@R> => fsp(Ty::new(TyKind::Bool, Span::new(lo, hi))),
  <lo:@L> "str" <hi:@R> => fsp(Ty::new(TyKind::Str, Span::new(lo, hi))),
};
TyFun: Fsp<Ty> = {
  <lo:@L> "Fn" "(" <tys:Comma<Ty>> ")" ":" <ty:Ty> <hi:@R> => fsp(Ty::new(TyKind::Fn(tys, ty), Span::new(lo, hi))),
};
TyArray: Fsp<Ty> = {
  <lo:@L> <indexed:TyPrim> "[" <size:LiteralIntDec?> "]" <hi:@R> => fsp(Ty::new(TyKind::Array(indexed, size), Span::new(lo, hi))),
};
TyTuple: Fsp<Ty> = {
  <lo:@L> "(" <tys:Comma<TyPrim>> ")" <hi:@R> => fsp(Ty::new(TyKind::Tuple(tys), Span::new(lo, hi))),
};

Pattern: Pattern = {
  Underscore,
  <lo:@L> <lit:Literal> <hi:@R> => Pattern::new(PatternKind::Lit(lit), Span::new(lo, hi)),
  <lo:@L> <identifier:Identifier> <hi:@R> => Pattern::new(PatternKind::Identifier(identifier), Span::new(lo, hi)),
  <lo:@L> "me" <hi:@R> => Pattern::new(PatternKind::MeLower, Span::new(lo, hi)),
};

Underscore: Pattern = <lo:@L> "_" <hi:@R> => Pattern::new(PatternKind::Underscore, Span::new(lo, hi));

Identifier: Fsp<Expr> = {
  <lo:@L> <identifier:Id> <hi:@R> => fsp(Expr::new(ExprKind::Identifier(identifier), Span::new(lo, hi))),
};

Id: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => String::from(s);

Literal: Fsp<Expr> = {
  <lo:@L> <lit:Lit> <hi:@R> => fsp(Expr::new(ExprKind::Lit(lit), Span::new(lo, hi))),
  LiteralInteger,
};

LiteralInteger: Fsp<Expr> = {
  <lo:@L> <int:LitIntDec> <hi:@R> => fsp(Expr::new(ExprKind::Lit(int), Span::new(lo, hi))),
};

Lit: Fsp<Lit> = {
  LitBool,
  LitStr,
  LitReal,
  LitIntBin,
  LitIntOct,
  LitIntHex,
  LitParser,
};

LitParser: Fsp<Lit> = {
  <lo:@L> BINARY_PARSER <int:LiteralIntDec> <hi:@R> => fsp(Lit::new(LitKind::Int(i64::from_str_radix(&format!("{int:b}"), 2).unwrap()), Span::new(lo, hi))),
  <lo:@L> OCTAL_PARSER <int:LiteralIntDec> <hi:@R> => fsp(Lit::new(LitKind::Int(i64::from_str_radix(&format!("{int:o}"), 8).unwrap()), Span::new(lo, hi))),
  <lo:@L> HEXADECIMAL_PARSER <int:LiteralIntDec> <hi:@R> => fsp(Lit::new(LitKind::Int(i64::from_str_radix(&format!("{int:x}"), 16).unwrap()), Span::new(lo, hi))),
  <lo:@L> DECIMAL_PARSER <real:LiteralReal> <hi:@R> => fsp(Lit::new(LitKind::Int(i64::from_str(&real.to_string()).unwrap()), Span::new(lo, hi))),
};

LitBool: Fsp<Lit> = <lo:@L> <boolean:LiteralBool> <hi:@R> => fsp(Lit::new(LitKind::Bool(boolean), Span::new(lo, hi)));
LitStr: Fsp<Lit> = <lo:@L> <string:LiteralStr> <hi:@R> => fsp(Lit::new(LitKind::Str(string), Span::new(lo, hi)));
LitReal: Fsp<Lit> = <lo:@L> <real:LiteralReal> <hi:@R> => fsp(Lit::new(LitKind::Real(real), Span::new(lo, hi)));
LitIntBin: Fsp<Lit> = <lo:@L> <bin:LiteralIntBin> <hi:@R> => fsp(Lit::new(LitKind::Int(bin), Span::new(lo, hi)));
LitIntOct: Fsp<Lit> = <lo:@L> <oct:LiteralIntOct> <hi:@R> => fsp(Lit::new(LitKind::Int(oct), Span::new(lo, hi)));
LitIntHex: Fsp<Lit> = <lo:@L> <hex:LiteralIntHex> <hi:@R> => fsp(Lit::new(LitKind::Int(hex), Span::new(lo, hi)));
LitIntDec: Fsp<Lit> = <lo:@L> <int:LiteralIntDec> <hi:@R> => fsp(Lit::new(LitKind::Int(int), Span::new(lo, hi)));

LiteralBool: bool = {
  "true" => true,
  "false" => false,
};

LiteralStr: String = <s:STRING> => s[1..(s.len() - 1)].to_string();
LiteralReal: f64 = <real:REAL> => f64::from_str(&real.replace('_', "")).unwrap();
LiteralIntBin: i64 = <bin:INTEGER_BINARY> => i64::from_str_radix(bin.replace('_', "").trim_start_matches("0b"), 2).unwrap();
LiteralIntOct: i64 = <oct:INTEGER_OCTAL> => i64::from_str_radix(oct.replace('_', "").trim_start_matches("0o"), 8).unwrap();
LiteralIntHex: i64 = <hex:INTEGER_HEXADECIMAL> => i64::from_str_radix(hex.replace('_', "").trim_start_matches("0x"), 16).unwrap();
LiteralIntDec: i64 = <int:INTEGER_DECIMAL> => i64::from_str(&int.replace('_', "")).unwrap();

public: Public = {
  <lo:@L> "pub" <hi:@R> => Public::Yes(Span::new(lo, hi)),
  () => Public::No,
};

asyncness: Async = {
  <lo:@L> "async" <hi:@R> => Async::Yes(Span::new(lo, hi)),
  () => Async::No,
};

unsafeness: Unsafe = {
  <lo:@L> "unsafe" <hi:@R> => Unsafe::Yes(Span::new(lo, hi)),
  () => Unsafe::No,
};

wasm: Wasm = {
  <lo:@L> "wasm" <hi:@R> => Wasm::Yes(Span::new(lo, hi)),
  () => Wasm::No,
};

mutability: Mutability = {
  <lo:@L> "mut" <hi:@R> => Mutability::Yes(Span::new(lo, hi)),
  () => Mutability::No,
};

Comma<E>: Vec<E> = {
  Sep<E, ",">,
};

Epsilon: () = {
  (),
};

Sep<T, S>: Vec<T> = {
  <mut v:(<T> S)*> <t:T?> => match t {
    None => v,
    Some(t) => {
      v.push(t);
      v
    }
  }
};

match {
  "b#" => BINARY_PARSER,
  "o#" => OCTAL_PARSER,
  "x#" => HEXADECIMAL_PARSER,
  "d#" => DECIMAL_PARSER,
  r"[0-9_]\.[0-9_]+" => REAL,
  r"0b[0-1_]+" => INTEGER_BINARY,
  r"0o[0-7_]+" => INTEGER_OCTAL,
  r"0x[0-9a-fA-F_]+" => INTEGER_HEXADECIMAL,
  r"[0-9][0-9_]*" => INTEGER_DECIMAL,
  r#""(?:[^"\\]|\\.)*""# => STRING,
  r"\s*" => {},
  // line comments
  r"--[^\n\r]*[\n\r]*" => {},
  // doc line comments
  r"-![^\n\r]*[\n\r]*" => {},
} else {
  _
}
