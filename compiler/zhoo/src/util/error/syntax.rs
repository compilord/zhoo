use crate::util::color::Color;
use crate::util::error::ReportMessage;
use crate::util::span::Span;

pub enum SyntaxKind {
  /// generated by the parser when it encounters a token (or EOF) it did not
  InvalidToken(Span),

  /// generated by the parser when it encounters an EOF it did not expect.
  UnrecognizedEOF(Span, String),

  /// the unexpected token: generated by the parser when
  /// it encounters a token it did not expect.
  UnrecognizedToken(Span, String),

  /// generated by the parser when it encounters additional, unexpected tokens.
  ExtraToken(Span, String),

  /// Custom error type.
  User(String),
}

pub fn write_syntax_report(kind: &SyntaxKind) -> ReportMessage {
  use ariadne::Fmt;

  match kind {
    SyntaxKind::InvalidToken(span) => (
      ariadne::ReportKind::Error,
      format!("{}", "invalid character".fg(Color::title())),
      vec![(
        *span,
        format!("{}", "this character does not ring a bell".fg(Color::error())),
        Color::error(),
      )],
      vec![format!("{}", "ðŸ¤– what language are you trying to speak to me in? i only speak zhoo".fg(Color::hint()))],
      vec![format!("{}", "ðŸ‘‰ please go read the doc: <doc-link>")]
    ),
    SyntaxKind::UnrecognizedEOF(_span, _eof) => (
      ariadne::ReportKind::Error,
      format!("{}", "unrecognized eof".fg(Color::title())),
      vec![],
      vec![],
      vec![]
    ),
    SyntaxKind::UnrecognizedToken(span, expected) => (
      ariadne::ReportKind::Error,
      format!("{}", "unrecognized character".fg(Color::title())),
      vec![(
        *span,
        format!("{}", "um... i can't do anything with this character.".fg(Color::error())),
        Color::error(),
      )],
      vec![format!(
        "{}",
        "ðŸ¤– in other languages this character is valid but the qhantoom syntax does not recognize it.".fg(Color::hint())
      )],
      vec![format!("ðŸ‘‰ {}", format_args!("expected one of {expected}").fg(Color::help()))],
    ),
    SyntaxKind::ExtraToken(_span, _unexpected) => (
      ariadne::ReportKind::Error,
      format!("{}", "extra token".fg(Color::title())),
      vec![],
      vec![],
      vec![]
    ),
    SyntaxKind::User(error) => (
      ariadne::ReportKind::Error,
      format!("{}", error.fg(Color::title())),
      vec![],
      vec![],
      vec![]
    ),
  }
}
